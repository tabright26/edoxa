// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eDoxa.Arena.Challenges.Infrastructure;

namespace eDoxa.Arena.Challenges.Infrastructure.Migrations
{
    [DbContext(typeof(ChallengesDbContext))]
    [Migration("20190602191708_InitialCreate1")]
    partial class InitialCreate1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("edoxa")
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Game");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("TestMode");

                    b.HasKey("Id");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("eDoxa.Arena.Challenges.Domain.AggregateModels.MatchAggregate.Match", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("MatchExternalId")
                        .IsRequired();

                    b.Property<Guid>("ParticipantId");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("eDoxa.Arena.Challenges.Domain.AggregateModels.MatchAggregate.Stat", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("MatchId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.Property<float>("Weighting");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("eDoxa.Arena.Challenges.Domain.AggregateModels.ParticipantAggregate.Participant", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ChallengeId");

                    b.Property<string>("ExternalAccount")
                        .IsRequired();

                    b.Property<DateTime>("Timestamp");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge", b =>
                {
                    b.OwnsOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup", "Setup", b1 =>
                        {
                            b1.Property<Guid>("ChallengeId");

                            b1.HasKey("ChallengeId");

                            b1.ToTable("Challenges","edoxa");

                            b1.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge")
                                .WithOne("Setup")
                                .HasForeignKey("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup", "ChallengeId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("eDoxa.Arena.Challenges.Domain.BestOf", "BestOf", b2 =>
                                {
                                    b2.Property<Guid>("ChallengeSetupChallengeId");

                                    b2.Property<int>("Value");

                                    b2.HasKey("ChallengeSetupChallengeId");

                                    b2.ToTable("Challenges","edoxa");

                                    b2.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup")
                                        .WithOne("BestOf")
                                        .HasForeignKey("eDoxa.Arena.Challenges.Domain.BestOf", "ChallengeSetupChallengeId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("eDoxa.Arena.Challenges.Domain.Entries", "Entries", b2 =>
                                {
                                    b2.Property<Guid>("ChallengeSetupChallengeId");

                                    b2.Property<int>("Value");

                                    b2.HasKey("ChallengeSetupChallengeId");

                                    b2.ToTable("Challenges","edoxa");

                                    b2.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup")
                                        .WithOne("Entries")
                                        .HasForeignKey("eDoxa.Arena.Challenges.Domain.Entries", "ChallengeSetupChallengeId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("eDoxa.Arena.Challenges.Domain.PayoutRatio", "PayoutRatio", b2 =>
                                {
                                    b2.Property<Guid>("ChallengeSetupChallengeId");

                                    b2.Property<float>("Value");

                                    b2.HasKey("ChallengeSetupChallengeId");

                                    b2.ToTable("Challenges","edoxa");

                                    b2.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup")
                                        .WithOne("PayoutRatio")
                                        .HasForeignKey("eDoxa.Arena.Challenges.Domain.PayoutRatio", "ChallengeSetupChallengeId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("eDoxa.Arena.Challenges.Domain.ServiceChargeRatio", "ServiceChargeRatio", b2 =>
                                {
                                    b2.Property<Guid>("ChallengeSetupChallengeId");

                                    b2.Property<float>("Value");

                                    b2.HasKey("ChallengeSetupChallengeId");

                                    b2.ToTable("Challenges","edoxa");

                                    b2.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup")
                                        .WithOne("ServiceChargeRatio")
                                        .HasForeignKey("eDoxa.Arena.Challenges.Domain.ServiceChargeRatio", "ChallengeSetupChallengeId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("eDoxa.Arena.Domain.ValueObjects.EntryFee", "EntryFee", b2 =>
                                {
                                    b2.Property<Guid>("ChallengeSetupChallengeId");

                                    b2.Property<decimal>("Amount");

                                    b2.Property<int>("Type");

                                    b2.HasKey("ChallengeSetupChallengeId");

                                    b2.ToTable("Challenges","edoxa");

                                    b2.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup")
                                        .WithOne("EntryFee")
                                        .HasForeignKey("eDoxa.Arena.Domain.ValueObjects.EntryFee", "ChallengeSetupChallengeId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsMany("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeStat", "Stats", b1 =>
                        {
                            b1.Property<Guid>("ChallengeId")
                                .HasColumnName("ChallengeId");

                            b1.Property<string>("Name")
                                .HasColumnName("Name");

                            b1.Property<float>("Weighting")
                                .HasColumnName("Weighting");

                            b1.HasKey("ChallengeId", "Name", "Weighting");

                            b1.ToTable("Scoring");

                            b1.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge")
                                .WithMany("Stats")
                                .HasForeignKey("ChallengeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeTimeline", "Timeline", b1 =>
                        {
                            b1.Property<Guid>("ChallengeId");

                            b1.Property<DateTime?>("ClosedAt");

                            b1.Property<long>("Duration");

                            b1.Property<DateTime?>("StartedAt");

                            b1.HasKey("ChallengeId");

                            b1.ToTable("Challenges","edoxa");

                            b1.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge")
                                .WithOne("Timeline")
                                .HasForeignKey("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeTimeline", "ChallengeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("eDoxa.Arena.Domain.Bucket", "Buckets", b1 =>
                        {
                            b1.Property<Guid>("ChallengeId")
                                .HasColumnName("ChallengeId");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasDefaultValue(new Guid("51d30870-b1a1-4042-92d3-e7400b2b27f9"));

                            b1.Property<int>("Size")
                                .HasColumnName("Name");

                            b1.HasKey("ChallengeId", "Id");

                            b1.ToTable("Payout");

                            b1.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge")
                                .WithMany("Buckets")
                                .HasForeignKey("ChallengeId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("eDoxa.Arena.Domain.ValueObjects.Prize", "Prize", b2 =>
                                {
                                    b2.Property<Guid>("BucketChallengeId");

                                    b2.Property<Guid>("BucketId")
                                        .ValueGeneratedOnAdd();

                                    b2.Property<decimal>("Amount");

                                    b2.Property<int>("Type");

                                    b2.HasKey("BucketChallengeId", "BucketId");

                                    b2.ToTable("Payout","edoxa");

                                    b2.HasOne("eDoxa.Arena.Domain.Bucket")
                                        .WithOne("Prize")
                                        .HasForeignKey("eDoxa.Arena.Domain.ValueObjects.Prize", "BucketChallengeId", "BucketId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("eDoxa.Arena.Challenges.Domain.AggregateModels.MatchAggregate.Match", b =>
                {
                    b.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ParticipantAggregate.Participant", "Participant")
                        .WithMany("Matches")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDoxa.Arena.Challenges.Domain.AggregateModels.MatchAggregate.Stat", b =>
                {
                    b.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.MatchAggregate.Match")
                        .WithMany("Stats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDoxa.Arena.Challenges.Domain.AggregateModels.ParticipantAggregate.Participant", b =>
                {
                    b.HasOne("eDoxa.Arena.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge", "Challenge")
                        .WithMany("Participants")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
