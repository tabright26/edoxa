// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace eDoxa.Challenges.Infrastructure.Migrations
{
    [DbContext(typeof(ChallengesDbContext))]
    internal class ChallengesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("edoxa")
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Game");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Scoring");

                    b.HasKey("Id");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Match", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("LinkedMatch")
                        .IsRequired();

                    b.Property<Guid>("ParticipantId");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Participant", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ChallengeId");

                    b.Property<string>("LinkedAccount")
                        .IsRequired();

                    b.Property<DateTime>("Timestamp");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Stat", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("MatchId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.Property<float>("Weighting");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eDoxa.Seedwork.Infrastructure.Repositories.RequestLogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("IdempotencyKey");

                    b.Property<string>("LocalIpAddress");

                    b.Property<string>("Method");

                    b.Property<string>("Origin");

                    b.Property<string>("RemoteIpAddress");

                    b.Property<DateTime>("Time");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique()
                        .HasFilter("[IdempotencyKey] IS NOT NULL");

                    b.ToTable("RequestLogs","dbo");
                });

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge", b =>
                {
                    b.OwnsOne("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup", "Setup", b1 =>
                        {
                            b1.Property<Guid>("ChallengeId");

                            b1.Property<int>("BestOf");

                            b1.Property<int>("Entries");

                            b1.Property<decimal>("EntryFee")
                                .HasColumnType("decimal(4,2)");

                            b1.Property<bool>("Generated");

                            b1.Property<float>("PayoutRatio");

                            b1.Property<float>("ServiceChargeRatio");

                            b1.Property<int>("Type");

                            b1.HasKey("ChallengeId");

                            b1.ToTable("ChallengeSetups","edoxa");

                            b1.HasOne("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge")
                                .WithOne("Setup")
                                .HasForeignKey("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeSetup", "ChallengeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeTimeline", "Timeline", b1 =>
                        {
                            b1.Property<Guid>("ChallengeId");

                            b1.Property<DateTime?>("ClosedAt");

                            b1.Property<DateTime>("CreatedAt");

                            b1.Property<long?>("ExtensionPeriod");

                            b1.Property<bool>("LiveMode");

                            b1.Property<DateTime?>("PublishedAt");

                            b1.Property<long?>("RegistrationPeriod");

                            b1.HasKey("ChallengeId");

                            b1.ToTable("ChallengeTimelines","edoxa");

                            b1.HasOne("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge")
                                .WithOne("Timeline")
                                .HasForeignKey("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.ChallengeTimeline", "ChallengeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Match", b =>
                {
                    b.HasOne("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Participant", "Participant")
                        .WithMany("Matches")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Participant", b =>
                {
                    b.HasOne("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Challenge", "Challenge")
                        .WithMany("Participants")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Stat", b =>
                {
                    b.HasOne("eDoxa.Challenges.Domain.AggregateModels.ChallengeAggregate.Match")
                        .WithMany("Stats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
