// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eDoxa.Challenges.Infrastructure;

namespace eDoxa.Challenges.Api.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ChallengesDbContext))]
    internal class ChallengesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eDoxa.Challenges.Infrastructure.Models.ChallengeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BestOf")
                        .HasColumnType("int");

                    b.Property<int>("Entries")
                        .HasColumnType("int");

                    b.Property<int>("Game")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SynchronizedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Challenge");
                });

            modelBuilder.Entity("eDoxa.Challenges.Infrastructure.Models.MatchModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("GameDuration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("GameStartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameUuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SynchronizedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("eDoxa.Challenges.Infrastructure.Models.ParticipantModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChallengeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SynchronizedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("eDoxa.Challenges.Infrastructure.Models.ChallengeModel", b =>
                {
                    b.OwnsMany("eDoxa.Challenges.Infrastructure.Models.ScoringItemModel", "ScoringItems", b1 =>
                        {
                            b1.Property<Guid>("ChallengeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("Order")
                                .HasColumnType("int");

                            b1.Property<float>("Weighting")
                                .HasColumnType("real");

                            b1.HasKey("ChallengeId", "Id");

                            b1.ToTable("ScoringItem");

                            b1.WithOwner()
                                .HasForeignKey("ChallengeId");
                        });

                    b.OwnsOne("eDoxa.Challenges.Infrastructure.Models.ChallengeTimelineModel", "Timeline", b1 =>
                        {
                            b1.Property<Guid>("ChallengeModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("ClosedAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<long>("Duration")
                                .HasColumnType("bigint");

                            b1.Property<DateTime?>("StartedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("ChallengeModelId");

                            b1.ToTable("Challenge");

                            b1.WithOwner()
                                .HasForeignKey("ChallengeModelId");
                        });
                });

            modelBuilder.Entity("eDoxa.Challenges.Infrastructure.Models.MatchModel", b =>
                {
                    b.HasOne("eDoxa.Challenges.Infrastructure.Models.ParticipantModel", "Participant")
                        .WithMany("Matches")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("eDoxa.Challenges.Infrastructure.Models.StatModel", "Stats", b1 =>
                        {
                            b1.Property<Guid>("MatchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Value")
                                .HasColumnType("float");

                            b1.Property<float>("Weighting")
                                .HasColumnType("real");

                            b1.HasKey("MatchId", "Id");

                            b1.ToTable("Stat");

                            b1.WithOwner()
                                .HasForeignKey("MatchId");
                        });
                });

            modelBuilder.Entity("eDoxa.Challenges.Infrastructure.Models.ParticipantModel", b =>
                {
                    b.HasOne("eDoxa.Challenges.Infrastructure.Models.ChallengeModel", "Challenge")
                        .WithMany("Participants")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
