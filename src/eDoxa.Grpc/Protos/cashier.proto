syntax = "proto3";

option csharp_namespace = "eDoxa.Grpc.Protos";

import "google/protobuf/empty.proto";

package cashier;

service AccountService {
	rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse);
	rpc FetchTransactions (FetchTransactionsRequest) returns (FetchTransactionsResponse);
	rpc CreateTransaction (CreateTransactionRequest) returns (CreateTransactionResponse);
}

service ChallengeService {
	rpc FetchChallenges (FetchChallengesRequest) returns (FetchChallengesResponse);
	rpc FindChallenge (FindChallengeRequest) returns (FindChallengeResponse);
	rpc CreateChallenge (CreateChallengeRequest) returns (CreateChallengeResponse);
}

service BundleService {
	rpc FetchBundles(FetchBundlesRequest) returns (FetchBundlesResponse);
}

message FetchTransactionsRequest {

}

message FetchTransactionsResponse {

}

message FetchBundlesRequest {

}

message FetchBundlesResponse {

}

message GetBalanceRequest {

}

message GetBalanceResponse {
	Currency currency = 1;
	double available = 2;
	double pending = 3;
}

message FindChallengeRequest {

}

message FindChallengeResponse {

}

message FetchChallengesRequest {

}

message FetchChallengesResponse {

}

message CreateChallengeRequest {
	string challengeId = 1;
	int32 payoutEntries = 2;
	EntryFee entryFee = 3;
}

message CreateTransactionRequest {
  TransactionType type = 1;
  Currency currency = 2;
  double amount = 3;
  map<string, string> metadata = 4;
}

message CreateChallengeResponse {
	string id = 1;
	EntryFee entryFee = 2;
	Payout payout = 3;
}

message CreateTransactionResponse {
	string id = 1;
	int64 timestamp = 2;
	Currency currency = 3;
	double amount = 4;
	string description = 5;
	TransactionType type = 6;
	TransactionStatus status = 7;
}

message BundleResponse {
	double amount = 1;
	double price = 2;
}

message Payout {
	message PrizePool {
		Currency currency = 1;
		double amount = 2;
	}
	message Bucket {
		int32 size = 1;
		double prize = 2;
	}
	PrizePool prizePool = 1;
	repeated Bucket buckets = 2;
}

message EntryFee {
  double amount = 1;
  Currency currency = 2;
}

enum Currency {
  CURRENCY_NONE = 0;
  CURRENCY_MONEY = 1;
  CURRENCY_TOKEN = 2;
  CURRENCY_ALL = -1;
}

enum TransactionType {
  TRANSACTION_TYPE_NONE = 0;
  TRANSACTION_TYPE_DEPOSIT = 1;
  TRANSACTION_TYPE_REWARD = 2;
  TRANSACTION_TYPE_CHARGE = 4;
  TRANSACTION_TYPE_PAYOUT = 8;
  TRANSACTION_TYPE_WITHDRAWAL = 16;
  TRANSACTION_TYPE_ALL = -1;
}

enum TransactionStatus {
  TRANSACTION_STATUS_NONE = 0;
  TRANSACTION_STATUS_PENDING = 1;
  TRANSACTION_STATUS_SUCCEDED = 2;
  TRANSACTION_STATUS_FAILED = 4;
  TRANSACTION_STATUS_CANCELED = 8;
  TRANSACTION_STATUS_ALL = -1;
}